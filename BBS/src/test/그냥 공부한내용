1. Mybatis Mapper에서 쿼리문을 작성시 ${데이터} 가 아닌 #{데이터}를 쓰는 이유

-> #{} 이것은 파라미터가 String 형태로 들어와 자동적으로 '파라미터'형태가 된다.
      예를들어, user_id = #{user_id}라는 문장이 있다 가정하자. 그러면 #{user_id}의 user_id값이 abc라면 쿼리문에는 user_id = 'abc'의 형태가 된다.
      쿼리 주입(SQL 인젝션)을 예방할 수 있어 보안측면에 유리하다.

-> ${} 이것은 파라미터가 바로 출력이된다.
       해당 컬럼의 자료형에 맞추어 파라미터의 자료형이 변경된다.
       쿼리 주입(SQL Injection)을 예방할 수 없어 보안측면에서 불리하다. 그러므로 사용자의 입력을 전달할때는 사용하지 않는편이 낫다.
       테이블이나 컬럼명을 파라미터로 전달하고 싶을때 사용한다. ${}이것은 따옴표가 따로 붙지않는다.
       
       
2. DAO의 @Repository, Service의 @Service 차이점:
   repository 패키지는 데이터베이스(이하 DB)에 접근하는 모든 코드가 모여있는곳이다.
   service 패키지는 DB에 접근하는 코드들은 repository에 위임하고, 비지니스 로직과 관련된 모든 코드가 모여있는곳이다.
      즉, 이렇게 구분해두면 비즈니스 로직과 관련된 부분에 문제가 발생했을 때는 service 패키지를 확인하고, 
   DB 접근과 관련된 문제가 발생하면 repository 부분을 확인을 할 수 있어 편리하다는 장점이 있다.
   
   
3. mapper XML을 작성할때, 즉 쿼리문을 작성할때 마지막에 ;(세미콜론)으로 종료하면 에러가뜬다.


4. 회원가입폼 작성시 DB 컬럼과 view단에서 작성한 값하고 연결할때, DB컬럼네임 = VO = JSP에서 <input name="">의 이름은 다 같게 설정해준다.


5. addAttribute VS addFlashAttribute 차이점:
   addAttribute는 성공여부를 뷰에 넘겨주어 redirect할 때, 파라미터가 URL뒤에 붙어 유지가되는것과 달리
   addFlashAttribute는 URL에 존재하지 않습니다. 일회성으로 URL에 붙지 않고 세션 후 재지정 요청이 들어오면 값은 
      사라지게 되므로 성공 여부를 가리기 위해 임시적으로 값을 전달할 때 이용합니다. 
      
      
6. Controller(백엔드 영역)에서 JSP(프론트 영역)으로 데이터 전송하는법 :
   
   (1) Model을 이용한 데이터 전송
       -> 첫번째 방식은 Model객체를 이용한 방법입니다. Servlet에서는 request객체에 정보를 태워서 보냈지만 Spring에서는 model객체에 데이터를
                     태워서 JSP영역으로 전달합니다. 이때 model객체에는 String이나 int는 물론 Object형태의 데이터도 전달이 가능하기 때문에 dto,map,list
                     등등 어느형태의 자료도 전달이 가능합니다. 사용법은 매개변수에 Model 객체추가하면 사용가능하고 담고자하는 정보를 addAttribute("데이터 이름", "값") 넣어 보내면 됩니다.
         ex) 매개변수에 (Model model)를 추가했다는 가정하에 model.addAttribute("변수명","값"); 하고 JSP에서 받으려면 ${변수명}해주면 그자리에 값이 나옵니다. 
   
   (2) Redirect를 이용한 데이터 전송
       -> 두번째 방식은 Redirect를 이용한 데이터 전송방법입니다. 시스템에 변화가 생기는 요청(회원가입, 글쓰기 등)의 경우에는 redirection을 사용하는 것이 바랍직합니다.
       	     사용방법은 PostMapping으로 받아 redirect:/주소 해서 값을보내고 다시 해당주소를 GetMapping으로 받아 값을 전달해준다.
       	     
   (3) ResponseBody를 이용한 데이터 전송
   	   -> 주로 ajax 통신할때 사용된다. 프론트단에서 정보를 백엔드로 요청하고 백엔드가 값을 처리후 결과를 다시 프론트단에게 넘겨줄때 사용합니다. 
   	           그러면 새로고침 없이 비동기통신이 가능해집니다. 댓글등록이나 카테고리 선택했을때 선택된 값을 호출할때 등 사용됩니다.
   	           
   	           
7. Foward 방식 VS Redirect 방식 차이
   Forward 방식은 Web Container 차원에서 페이지의 이동만 존재합니다. 실제로 웹 브라우저는 다른페이지로 이동했음을 알 수 없습니다. 그렇기 때문에 웹브라우저는
       최초에 호출한 URL이 표시되고, 이동한 페이지의 URL정보는 확인할 수 없습니다. 또한 현재 실행중인 페이지와 foward에 의해 호출될 페이지는 Request와 Response 객체를 공유합니다.
   Foward는 다음으로 이동 할 URL로 요청정보를 그대로 전달합니다. 그렇기 떄문에 사용자가 최초로 요청한 요청정보는 다음 URL에서도 유효합니다. 
       예를들어, 게시판을 작성하는 과정이라 할 떄, 사용자가 보낸 요청 정보를 이용하여 글쓰기 기능을 수행한다고 할때, forward를 사용하여 응답 페이지를 부르면 다음과
       같은 문제가 발생하게 됩니다. 만약 사용자가 실수 혹은 고의로 글쓰기 응답 페이지에서 새로고침을 누른다면, 요청 정보가 그대로 살아있기 때문에 
       요청이 여러 번 전달되어 동일한 게시물이 여러 번 등록될 수 있습니다. 그렇기 때문에 게시판을 제작하는 과정에서는 시스템에 변화가 생기지 않는 
       단순 조회 요청(글 목록 보기, 검색)의 경우 forward로 응답하는 것이 바람직합니다.
	
	Redirect는 Web Container로 명령이 들어오면, 웹 브라우저에게 다른 페이지로 이동하라 명령을 내립니다. 그러면 웹 브라우저는 URL을 지시된 주소로 바꾸고
	해당 주소로 이동합니다. 다른 웹 컨테이너에 있는 주소로 이동하며 새로운 페이지에서는 Request와 Response가 새롭게 생성됩니다. Redirect 경우 최초 요청을 받은
	URL1에서 클라이언트에게 redirect할 URL2를 반환하고, 클라이언트에서는 새로운 요청을 생성하여 URL2에 다시 요청을 보냅니다. 그러므로 처음 보냈던 최초의 Request와
	Reponse 객체는 유효하지 않고 새롭게 생성되는 것입니다. 예를 들어 게시판을 작성하는 과정이라고 할 때, 사용자가 보낸 요청 정보를 이용하여 글쓰기 기능을 수행한다고 할 때, 
	redirect를 사용하여 응답 페이지를 부르면 사용자가 실수 혹은 고의로 글쓰기 응답 페이지에서 새로고침을 누른다고 하더라도, 처음의 요청 정보는 존재하지 않으므로 
	게시물이 여러 번 등록되지 않습니다. 그렇기 때문에 시스템에 변화가 생기는 요청(회원가입, 글쓰기 등)의 경우에는 redirection을 사용하는 것이 바랍직합니다.
	
	
8. Model, ModelMap, ModelAndView 차이점 :
   Model, ModelMap은 데이터만을 저장합니다.
   ModelAndView는 데이터와 이동하고자 하는 view page를 같이 저장합니다.
   
   Model과 ModelMap은 둘 다 addAttribute를 사용합니다. 사용법 -> model.addAttribute("변수명","값"); modelMap.addAttribute("변수명","값");
   Model과 ModelMap은 데이터만을 저장후에 view에서 사용하는게 목적입니다.
   
   <Model과 ModelMap 차이점>
   -> Model은 인터페이스이고 ModelMap은 클래스입니다.
   
   ModelAndView는 addObject를 통해서 데이터를 저장합니다. setViewName를 통해서 이동하고자 하는 View를 저장합니다. 선언 방법은 메서드 안에서 
   ModelAndView mv = new ModelAndView();로 선언합니다. return type을 ModelAndView로 지정할 수 있습니다.
   
   
9. 	JSTL(Java Standard Tag Library)의 조건문 종류 :
	(1) <c:if></c:if> : 조건문중 가장 기본이 되는 조건문으로 특이사항으로는 다른언어와 다르게 else가 없다는 점이다. 
	        사용법 ex) <c:if test="${apple ==1}"> html구문~ </c:if>
	         
	(2) <c:choose></c:choose> : 이 조건문은 java의 switch ~ case 구문과 흡사합니다. 여러 조건중 하나를 선택할 때 사용됩니다.
		<c:choose> 는 switch에 해당되고, <c:when> 은 case에 해당 즉 여러개로 구성될 수 있고 <c:otherwise>는 default에 해당됩니다.
		사용법 ex) <c:choose> <c:when test="조건문1"> html ~ </when> <c:when test="조건문 2"> html ~  </c:when> 
							<c:otherwise> html ~  </c:otherwise>  </c:choose> 이렇게 구성되는 편이다.
							
							
10. JSP에서 FORM 데이터를 enctype="multipart/form-data" 형식으로 컨트롤에 보낼때 값을 받는 방법 :
	보통 JSP에서 컨트롤러에 값을 보낼 때, 요청 파라미터를 컨트롤러애서 처리하게되는데, 예를들어 <input type="text" name="name">에 값을 컨트롤러에서
	받아 들인다 가정한다면 String name = request.getParameter("name"); 이렇게해서 값을 가져올 수 있다. 하지만,  FORM 데이터를 enctype="multipart/form-data" 형식으로 
	요청한다면? MultipartRequest 객체를 선언해 그것으로 값을 불러들여야합니다. 서버로 이미지등 바이너리 파일(이진파일)을 전송할떄 주로 사용함.
	ex) MultipartRequest multi =null; multi = new MultipartRequest(request,saveFolder,fileSize,"UTF-8"); 
	    String nick = multi.getParameter("name"); 이런식으로 request 대신 MultipartRequest 객체를 사용해야합니다.


11. Spring에서 Cilent로 받은 요청을 객체로 바인딩하기 위해 사용되는 방법들 :
	(1) @RequestParam : @RequestParam은 1개의 HTTP 요청을 파라미터로 받기위해서 사용한다. @RequestParam은 필수 여부가 true이기 때문에,
	                                             반드시 해당 파라미터가 전송되어야하며, 파라미터가 전송되지 않으면 400에러가 발생한다. 반드시 필요한 값이 아니라면 required를
	                                             값을 false로 설정해주면 되고, defaultValue 옵션을 사용하면 기본값 역시 지정할 수 있다.
	
	(2) @RequestBody : @RequestBody란 클라이언트가 전송하는 JSON(application/json) 형태의 HTTP body를 java 객체로 변환시켜주는 역할을 한다.
					      그렇기 때문에 Body가 존재하지 않는 HTTP GET메소드에 @RequestBody를 활용하려고한다면 에러가 발생한다. @RequestBody로 받는 데이터는
					   Spring에서 관리하는 MessageConverter들 중 하나인 Mappingjackson2HttpMessageConverter를 통해 java 객체로 변환되는데,
					       이는 ObjectMapper 라는 클래스를 사용한다. 물론 데이터 형식이 json이 아닐수도 있다.
	
	(3) @ModelAttribute : @ModelAttribute는 클라이언트가 전송하는 폼(form)형태의 HTTP Body와 요청 파라미터들을 생성자나 Setter로 바인딩 하기위해 사용된다.
						  @ModelAttribute에는 매핑시키는 파라미터의 타입이 객체 타입의 타입과 일치하는지 등을 포함한 다양한 검증(Vaildiation) 작업이 추가적으로
						    진행되는데, 예를 들어 int형 index 변수에 "1번" 이라는 String형을 넣으려고 한다면 BindException이 발생하게된다.
						  @ModelAttribute를 사용해서 특정 파라미터 값만을 가져올 수 있다. 만약 우리가 다음과 같은 형태로 전송된 데이터에서 
						  @ModelArritbute("writer") String writer를 사용하면 writer 변수에 "뚱이" 값이 얻어진다.				       


12. 상대경로와 절대경로 차이 :
	상대경로란? 하나의 파일이 있는 위치에서 다른 파일이 위치한 주소를 경로로 지정하는것이다. 즉 반드시 비교대상이 있어야한다.
	절대경로란? 절대적인 주소, 변하지않는 주소를 경로로 지정하는것이다. 즉, 정적인 문자열을 통해 특정 컴퓨터의 파일 위치를 정확히 알려준다.
	ex) 상대경로 --> ../static/background.jpg     ,    <img src="./images/true.jpg"> 등
	         절대경로 --> /home/usr/ubuntu/workspace/mypage/env/static/background.jpg   ,   <a href="https://www.naver.com">
	    
	절대경로는 최상위 폴더로부터 경로를 찾기때문에 컴파일 속도가 느린반면에 상대경로는 기준으로 설정되어있는 폴더를 탐색하면되므로 컴파일 속도가 빠르다.
	/   => 루트 C/users 와 같은 기본 루트를 의미(최상위 루트)
	./  => 현재위치를 의미 즉,현재위치의 폴더를 의미(현재 디렉토리)
	../ => 현재 위치의 상단 폴더를 의미(상위 디렉토리)
	
	
13. JS onclick 이벤트와 addEventListener 차이 :
	onclick 이벤트는 모든 브라우저의 호환이 된다는 장점이 있지만, 이벤트들을 여러개 적용시키는것은 불가능하다는 단점이 있습니다. 
	만약, onclick이벤트 핸들러가 이미 사용한 상태에서 onclick이벤트를 추가한다면 추가된 이벤트가 기존의 이벤트를 덮어씁니다.
	
	addEventListener은 오래된 브라우저엔 지원하지 않는 단점이 있습니다. 하지만 이벤트리쓰너에 여러 이벤트들을 추가하여도 누적되어 모두 실행이 된다는 점에서 차이가 있습니다.
	
	
14. css : input 상자안에 값을 초기화 시켜주고 싶다면? 빈칸으로 만들고 싶다면?
	-> ex) <input type="text" class="a"> 일때 js에서 해당 값을 빈칸으로 만들고 싶다한다면 $(".a").val(''); 이렇게 해주면 빈칸으로 만들어진다.	


15. css : <span>태그에 margin-top이나 margin-bottom을 거는방법 :
	<span>태그는 기본적으로 한줄로 작성하는 display:inline이 내제 되어있습니다. 때문에, 왼쪽이나 오른쪽에 마진을 걸 순 있지만 위 아래는 걸 수 없습니다.
	그렇다면 어떻게 걸까? 답은 display 스타일 형식을 바꿔주면 됩니다. display:inline-block으로 바꿔준다면 div처럼 네방향 다 margin을 걸 수 있습니다.
	

16. css : position속성중 fixed 랑 absolute 차이점은?
	absolute => position: relative를 한것을 기준으로 위치를 조정 시키는 것이다. 즉, 위치 조정한곳에 고정시키는 것을 의미
				만약 부모의 속성이 static이 아닌 경우에는 부모의 시작점을 기준으로 고정시키는 것이다. absolute는 스크롤에따라 변화가 없이 고정된다.
				
	fixed => 부모속성에 상관없이 항상 화면에 절대적인 위치를 갖는다. 스크롤시에도 항상 그자리이다.
	

17. js 기능중 document.execCommand()기능사용중 잘 안되었을 때
	에디터를 구현하는 도중 html에 span태그에 onclick을 이벤트리쓰너를 걸어    document.execCommand('bold') 를 사용하여 구현하려했다.
	하지만 span태그와 div태그는 잘 작동되지않는 반면, input=button태그와 button태그는 잘 작동되는걸 볼 수 있다. 왜 그러는진 잘 모르겠다.
	그래서 사용법을 찾아본 결과 button을 이용하여 사용하는걸로 봐선 그렇게 구현해놓은듯 싶다.
	
	
18. input=button과 <button>태그의 차이점 :
	button태그는 기본적으로 default값이 submit이다. 즉, 폼태그안에 button태그를 만들어 누르면 전송이된다. 만약 전송기능이 아닌 버튼기능으로서
	작동시키고 싶다면, <button type="button"></button>과 같이 타입을 button으로 명시해줘야한다.
	button태그에 속성은 총 3가지로 submit, reset, button기능이 있다.
	input과 다르게 css적으로 버튼안에 이미지를 넣는다는등 꾸미는게 비교적 쉽다. 
	
	제일 큰 차이점은 button태그는 스스로 닫지않는 태그인 반면 input태그는 스스로 닫는 태그입니다. 때문에 input태그사용시 뒤에 </input>을 사용하지 않아도 됩니다.
	
	
19. 게시물작성중 다른페이지로 이동하거나 뒤로가기를 눌렀을때 다시 한번 물어보는 경고문 출력하고 스킵하는 방법:
	
	window.onbeforeunload = function() { 
  		return "Are you sure you wish to leave this delightful page?";
	}	 
	
	--> 이렇게 하면 window.onbeforeunload = function(){} 이 함수를 실행하면 한번더 되묻는다.
	만약, 나가기 경고문 즉, 위 경고문을 안뜨게 하고싶은 상황이 생긴다면, 예를들어 게시물을 작성한 경우
	게시물작성하고 저장하는 함수 부분에 window.onbeforeunload = null 값으로 해주면 함수가 실행하는 와중에 경고문을 스킵할 수 있습니다.

20. 
	 	
       	