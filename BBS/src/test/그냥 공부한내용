1. Mybatis Mapper에서 쿼리문을 작성시 ${데이터} 가 아닌 #{데이터}를 쓰는 이유

-> #{} 이것은 파라미터가 String 형태로 들어와 자동적으로 '파라미터'형태가 된다.
      예를들어, user_id = #{user_id}라는 문장이 있다 가정하자. 그러면 #{user_id}의 user_id값이 abc라면 쿼리문에는 user_id = 'abc'의 형태가 된다.
      쿼리 주입(SQL 인젝션)을 예방할 수 있어 보안측면에 유리하다.

-> ${} 이것은 파라미터가 바로 출력이된다.
       해당 컬럼의 자료형에 맞추어 파라미터의 자료형이 변경된다.
       쿼리 주입(SQL Injection)을 예방할 수 없어 보안측면에서 불리하다. 그러므로 사용자의 입력을 전달할때는 사용하지 않는편이 낫다.
       테이블이나 컬럼명을 파라미터로 전달하고 싶을때 사용한다. ${}이것은 따옴표가 따로 붙지않는다.
       
       
2. DAO의 @Repository, Service의 @Service 차이점:
   repository 패키지는 데이터베이스(이하 DB)에 접근하는 모든 코드가 모여있는곳이다.
   service 패키지는 DB에 접근하는 코드들은 repository에 위임하고, 비지니스 로직과 관련된 모든 코드가 모여있는곳이다.
      즉, 이렇게 구분해두면 비즈니스 로직과 관련된 부분에 문제가 발생했을 때는 service 패키지를 확인하고, 
   DB 접근과 관련된 문제가 발생하면 repository 부분을 확인을 할 수 있어 편리하다는 장점이 있다.
   
   
3. mapper XML을 작성할때, 즉 쿼리문을 작성할때 마지막에 ;(세미콜론)으로 종료하면 에러가뜬다.


4. 회원가입폼 작성시 DB 컬럼과 view단에서 작성한 값하고 연결할때, DB컬럼네임 = VO = JSP에서 <input name="">의 이름은 다 같게 설정해준다.


5. addAttribute VS addFlashAttribute 차이점:
   addAttribute는 성공여부를 뷰에 넘겨주어 redirect할 때, 파라미터가 URL뒤에 붙어 유지가되는것과 달리
   addFlashAttribute는 URL에 존재하지 않습니다. 일회성으로 URL에 붙지 않고 세션 후 재지정 요청이 들어오면 값은 
      사라지게 되므로 성공 여부를 가리기 위해 임시적으로 값을 전달할 때 이용합니다. 